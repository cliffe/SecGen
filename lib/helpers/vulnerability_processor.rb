class VulnerabilityProcessor
    # vulnerabilities are randomly selected from the definitions in vulns.xml (all_vulns)
    # based on the attributes optionally specified in scenario.xml (want_vulns)
    def process(want_vulns, all_vulns)
      return_vulns = {}

      #
      #get all subdirectories of MODULES_PATH
      #compare current vuln with list from modules path

      #if subdirectory is found, goto next criteria, if its not found throw error

      #search sub list for CVE before _ if specified
      #load all secgen_metadatas for selected type into memory
      #iterate over metadatas to get all vulns of a cer

      legal_vulns = all_vulns.clone
      want_vulns.each do |vulnerability_query|
        # select based on selected type, access, cve...

        # copy vulns array
        search_list = legal_vulns.clone
        # shuffle order of available vulnerabilities
        search_list.shuffle!
        # remove all the vulns that don't match the current selection (type, etc)
        if vulnerability_query.type.length > 0
          puts "Searching for vulnerability matching type: " + vulnerability_query.type
          search_list.delete_if{|x| x.type != vulnerability_query.type}
        end
        if vulnerability_query.access.length > 0
          puts "Searching for vulnerability matching access: " + vulnerability_query.access
          search_list.delete_if{|x| x.access != vulnerability_query.access}
        end
        if vulnerability_query.cve.length > 0
          puts "Searching for vulnerability matching CVE: " + vulnerability_query.cve
          search_list.delete_if{|x| x.cve != vulnerability_query.cve}
        end

        if search_list.length == 0
          STDERR.puts "Matching vulnerability was not found please check the xml scenario.xml"
          STDERR.puts "(note: you can only have one of each type of vulnerability per system)"
          exit
        else
          # use from the top of the top of the randomised list
          return_vulns[vulnerability_query.id] = search_list[0]
          if search_list[0].type.length > 0
            puts "Selected vulnerability : " + search_list[0].type
          end

          # enforce only one of any vulnerability type (remove from available)
          legal_vulns.delete_if{|x| x.type == vulnerability_query.type}
        end
      end
      return return_vulns.values
    end

end