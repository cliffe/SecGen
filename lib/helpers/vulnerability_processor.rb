require '../../lib/constants'
class VulnerabilityProcessor
    # vulnerabilities are randomly selected from the definitions in vulns.xml (all_vulns)
    # based on the attributes optionally specified in scenario.xml (want_vulns)
    def process(want_vulns)
      @return_vulns = Hash.new

      #compare current vuln with list from modules path

      #if subdirectory is found, goto next criteria, if its not found throw error

      #search sub list for CVE before _ if specified
      #load all secgen_metadatas for selected type into memory
      #iterate over metadatas to get all vulns of a cer

      @legal_vulns = get_vulnerability_types # => ["ftp", "ssh"]


      want_vulns.each do |vulnerability|

        result = filter_vulnerability(vulnerability)

        if result != nil
          continue
        end



        if search_list.length == 0
          STDERR.puts "Matching vulnerability was not found please check the xml scenario.xml"
          STDERR.puts "(note: you can only have one of each type of vulnerability per system)"
          exit
        else
          # use from the top of the top of the randomised list
          return_vulns[vulnerability.id] = search_list[0]
          if search_list[0].type.length > 0
            puts "Selected vulnerability : " + search_list[0].type
          end

          # enforce only one of any vulnerability type (remove from available)
          legal_vulns.delete_if{|x| x.type == vulnerability.type}
        end
      end

      return return_vulns.values
    end
private

    def filter_vulnerability(vulnerability)


      #if the vulnerability cve provided matches one that has a directory created then add to hash
      if vulnerability.cve.length > 0 && @legal_vulns.any?{ |v| v.cve = vulnerability.cve }
         @return_vulns << vulnerability.hash
      end

      # remove all the vulns that don't match the current selection (type, etc)
      if vulnerability.type.length > 0
        puts "Searching for vulnerability matching type: " + vulnerability.type
        search_list.delete_if{|x| x.type != vulnerability.type}
      end
      if vulnerability.access.length > 0
        puts "Searching for vulnerability matching access: " + vulnerability.access
        search_list.delete_if{|x| x.access != vulnerability.access}
      end
    end

    def get_vulnerability_types
      return Dir.entries(VULNERABILITIES_PATH).select {|entry| File.directory? File.join(VULNERABILITIES_PATH ,entry) and !(entry =='.' || entry == '..') }
    end


end