<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

	<!--some basic decoding challenges-->
	<system>
		<system_name>decode_me</system_name>
		<base platform="linux"/>

		<vulnerability name="NFS Share Leak">
			<input into="strings_to_leak" unique_module_list="unique_encoders">
				<generator type="flag_generator" />
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
							<generator type="flag_generator" />
					</input>
				</encoder>
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<generator type="flag_generator" />
					</input>
				</encoder>
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<generator type="flag_generator" />
					</input>
				</encoder>
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<generator type="flag_generator" />
					</input>
				</encoder>
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<encoder type="ascii_reversable">
							<input into="strings_to_encode">
								<generator type="flag_generator" />
							</input>
						</encoder>
					</input>
				</encoder>
				<generator name="Bitwise XOR Challenge Generator"/>
			</input>
		</vulnerability>

		<network type="private_network" range="dhcp"/>
	</system>


	<!--a few vulnerabilities that are in the wild, with some flags that need decoding, some red herring services to keep things interesting-->
	<system>
		<system_name>in_the_wild</system_name>
		<base platform="linux"/>

		<vulnerability read_fact="strings_to_leak" access="remote" privilege="user_rwx">
			<input into="strings_to_leak">
				<generator type="flag_generator" />
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<generator type="flag_generator" />
					</input>
				</encoder>
			</input>
		</vulnerability>

		<!--double encoded-->
		<vulnerability read_fact="strings_to_leak" access="remote" privilege="user_rwx">
			<input into="strings_to_leak">
				<generator type="flag_generator" />
				<encoder type="ascii_reversable">
					<input into="strings_to_encode">
						<encoder type="ascii_reversable">
							<input into="strings_to_encode">
								<generator type="flag_generator" />
							</input>
						</encoder>
					</input>
				</encoder>
			</input>
		</vulnerability>

		<!-- vulnerability which can leak images, leak 2 image challenges and a random red-herring image -->
		<vulnerability read_fact="images_to_leak">
			<input into="images_to_leak">
				<generator name="Hidden Data in Image File Challenge"/>
				<generator name="QR Code Generator"/>
				<generator name="Random Image Generator"/>
			</input>
		</vulnerability>

		<service/>
		<service/>

		<network type="private_network" range="dhcp"/>
	</system>

	<!-- an example remote storage system, with a remotely exploitable vulnerability that can then be escalated to root -->
	<system>
		<system_name>that_escalated_quickly</system_name>
		<base platform="linux"/>

		<vulnerability read_fact="strings_to_leak" access="remote" privilege="user_rwx">
			<input into="strings_to_leak">
				<generator type="flag_generator" />
			</input>
		</vulnerability>

		<vulnerability read_fact="strings_to_leak" access="local" privilege="root_rwx">
			<input into="strings_to_leak">
				<generator type="flag_generator" />
			</input>
		</vulnerability>

		<service/>

		<network type="private_network" range="dhcp"/>
	</system>


</scenario>
