require 'minitest/autorun'
require '../../lib/helpers/vulnerability_processor'
require '../../lib/objects/vulnerability'
class VulnerabilityProcessorTests < MiniTest::Test

  def setup
    @sut = VulnerabilityProcessor.new
    #Array of Vulnerabilities
    @want_xml = Array.new
    @all_vuln_xml = Array.new
  end

  def test_when_given_one_vulnerability_should_return_one_vulnerability
    #arrange
    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @want_xml.push(vulnerability)
    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @all_vuln_xml.push(vulnerability)

    #act
    result = @sut.process(@want_xml, @all_vuln_xml)

    #assert

    assert(result.is_a?(Array), msg = 'The returned value is not an array')
    assert_equal(result.count, 1, msg= 'The returned count is less than 1')
    assert(result[0].is_a?(Vulnerability), msg = 'The first value is not a type of Vulnerability')
    assert_equal(result[0].type, 'ftp', msg = 'The first value does not have the type field : ftp')
    assert_equal(result[0].privilege, '', msg = 'The first value does not have the type privilege : EMPTY ')
    assert_equal(result[0].access, 'user', msg = 'The first value does not have the type access : user ')
    assert_equal(result[0].details, 'ftpbackdoor smiley face backdoor exploit', msg = 'The first value does not have the type details : ftpbackdoor smiley face backdoor exploit ')

  end

  def test_when_given_one_compatible_vulnerability_should_return_one_vulnerability
    #arrange
    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @want_xml.push(vulnerability)
    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @all_vuln_xml.push(vulnerability)

    vulnerability = Vulnerability.new('sqli',
                                      '',
                                      'root',
                                      'remote',
                                      'sqli')
    @all_vuln_xml.push(vulnerability)

    #act
    result = @sut.process(@want_xml, @all_vuln_xml)

    #assert

    assert(result.is_a?(Array), msg = 'The returned value is not an array')
    assert_equal(result.count, 1, msg= 'The returned count is less than 1')
    assert(result[0].is_a?(Vulnerability), msg = 'The first value is not a type of Vulnerability')
    assert_equal(result[0].type, 'ftp', msg = 'The first value does not have the type field : ftp')
    assert_equal(result[0].privilege, '', msg = 'The first value does not have the type privilege : EMPTY ')
    assert_equal(result[0].access, 'user', msg = 'The first value does not have the type access : user ')
    assert_equal(result[0].details, 'ftpbackdoor smiley face backdoor exploit', msg = 'The first value does not have the type details : ftpbackdoor smiley face backdoor exploit ')

  end

  def test_when_given_two_compatible_vulnerabilities_should_return_two_vulnerabilities
    #arrange
    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @want_xml.push(vulnerability)

    vulnerability = Vulnerability.new('ftp',
                                      '',
                                      'user',
                                      'remote',
                                      'ftpbackdoor smiley face backdoor exploit')
    @all_vuln_xml.push(vulnerability)

    vulnerability = Vulnerability.new('sqli',
                                      '',
                                      'root',
                                      'remote',
                                      'sqli')
    @all_vuln_xml.push(vulnerability)

    vulnerability = Vulnerability.new('sqli',
                                      '',
                                      'root',
                                      'remote',
                                      'sqli')

    @want_xml.push(vulnerability)




    #act
    result = @sut.process(@want_xml, @all_vuln_xml)

    #assert
    assert(result.is_a?(Array), msg = 'The returned value is not an array')
    assert_equal(result.count, 2, msg= 'The returned count is not equal to 2')
  end


end